/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Page components
	var Height = __webpack_require__(1),
	    Center = __webpack_require__(2),
	    Charcount = __webpack_require__(3),
	    DefaultOrder = 'leaderboard, event, shout-out, my-squad, buddy-up, hero, connection, rep',
	    ListArray = localStorage['listArray'] || DefaultOrder,
	    ListOrder = ListArray.split(',');
	
	// Doc ready
	$(document).ready(function() {
	  UserMessage.init();
	
	  // Specify pod order
	  orderUpdate(ListOrder, '[am-community~=tiles] [am-row]', true);
	
	  // Specify settings list order
	  orderUpdate(ListOrder, '[am-community~=settings-list]');
	
	  // Open settings
	  $('[am-community~=cog]').on('click', function() {
	    Modal.show('communitySettings');
	  });
	
	
	  $('[am-community~=close]').on('click', function() {
	    Modal.hide('communitySettings');
	    location.reload();
	  });
	
	  // Flip tiles
	  function carouseFlip(front, back, pod) {
	    $('[am-community~=tile-front] ' + front).on('click', function() {
	      $(this).parents('[am-community~=tile-wrapper]').addClass('flipped');
	      $(pod).owlCarousel('destroy');
	    });
	
	    $('[am-community~=tile-back] ' + back).on('click', function() {
	      $(this).parents('[am-community~=tile-wrapper]').removeClass('flipped');
	      setTimeout(function () {
	        $(pod).owlCarousel(options);
	      }, 100);
	    });
	  }
	
	  carouseFlip('[am-community~=reps]', '[am-community~=reps-back]', '[am-carousel~=pod-reps]');
	
	  carouseFlip('[am-community~=heroes]', '[am-community~=heroes-back]', '[am-carousel~=pod-hero]');
	
	  $('[am-community~=tile-front] [am-community~=ellipsis]').on('click', function() {
	    $(this).parents('[am-community~=tile-wrapper]').addClass('flipped');
	  });
	
	  $('[am-community~=tile-back] [am-community~=ellipsis]').on('click', function() {
	    $(this).parents('[am-community~=tile-wrapper]').removeClass('flipped');
	  });
	
	  // Toggle follow
	  $('[am-btn~=follow]').on('click', function() {
	    $(this).html() == 'Unfollow' ? $(this).html('Follow') : $(this).html('Unfollow');
	
	    $(this).attr('am-btn', function(index, attr){
	      return attr == 'cross fill follow' ? 'tick fill follow' : 'cross fill follow';
	    });
	  });
	
	  // Make all pods the same height
	  Height.itemHeight('[am-community~=tile-inner]', '[am-community~=tile-wrapper]', 768);
	  Height.itemHeight('[am-community~=tile-top]', '[am-community~=tile-bottom]', 768);
	
	  $(window).on('resize', function() {
	    Throttle.afterEvent('itemHeight', function() {
	      Height.itemHeight('[am-community~=tile-inner]', '[am-community~=tile-wrapper]', 768);
	      Height.itemHeight('[am-community~=tile-top]', '[am-community~=tile-bottom]', 768);
	    });
	  });
	
	  // Center nav on active item
	  Center.init('[am-sub-nav~=item].active', '[am-sub-nav~=inner]');
	
	  // Carousel options
	  var options = {
	    dots: false,
	    margin: 0,
	    nav: true,
	    rtl: true,
	    rewind: false,
	    items: 1,
	    navText: ['<div am-carousel="next"><i data-icon="arrow-left"></i></div>', '<div am-carousel="prev"><i data-icon="arrow-right"></i></div>']
	  }
	
	  // Carousel Initialization
	  $('[am-carousel~=pod-loop]').owlCarousel(options);
	
	  // Initialise jQuery UI sortable
	  $('[am-community~=settings-list]').sortable({
	    start: animateCrane,
	    stop: orderList,
	    placeholder: 'drop-zone',
	    tolerance: 'pointer'
	  });
	
	  // Animate crane
	  function animateCrane(e, ui) {
	    $('[am-community~=crane-block]').addClass('hover');
	    $('[am-community~=crane-block]').addClass($(ui.item).data('pod'));
	  }
	
	  // Update pod heights
	  function updateHeight(e) {
	    Height.itemHeight('[am-profile~=tile-badge]', '[am-hero~=tile]', '992');
	  }
	
	  // Re-sort pod order
	  function showLoader() {
	    $('[am-loader~=container]').addClass('show');
	  }
	
	  // List order
	  function orderList() {
	    $('[am-loader~=container]').removeClass('show');
	    $('[am-community~=crane-block]').removeClass();
	
	    ListOrder = $(this).sortable('toArray', {
	      attribute: 'data-pod'
	    });
	
	    // Store order array
	    localStorage['listArray'] = ListOrder;
	  }
	
	  // Re-sort pod order
	  function orderUpdate(order, list, pods) {
	    // Create variables
	    var list = list,
	        parent,
	        item,
	        pods;
	
	    // Loop through each item
	    ListOrder.forEach(function(element, index) {
	
	      // Define parent element
	      parent = $(list);
	
	      // Define item
	      item = $(list + ' [data-pod=' + element + ']');
	
	      item.remove().appendTo(parent);
	
	      // Check to see if pod list
	      if (pods) {
	
	        // Make pod box 8 cols if first
	        if (index === 0) {
	
	          item.attr('am-col', 'lg-8');
	          item.find('[am-community~=tile]').addClass('featured');
	
	        } else {
	
	          item.attr('am-col', 'lg-4');
	          item.find('[am-community~=tile]').removeClass('featured');
	        }
	      }
	
	    });
	
	  }
	
	  // Enable shout out submit button
	  $('[am-form~=shoutout]').on('keyup', function() {
	
	    // If the input is not empty
	    if($(this).val().length > 0) {   
	      $('[am-form~=submit]').removeAttr('disabled');
	    }
	  });
	
	  // Delete shout out
	  $('[am-shout-out~=delete]').click(function(e) {
	
	    // Confirm action
	    var confirm = window.confirm('Are you sure you want to delete this message?');
	
	    // Unconfirmed - prevent default
	    if (!confirm) {
	      e.preventDefault();
	    }
	  });
	
	  // Flag modal
	  $('[am-shout-out~=flag]').on('click', function(e) {
	    // Get post ID
	    var post = $(this).attr('data-post');
	
	    // Open modal
	    Modal.show('commentflag');
	
	    $('[am-form~=post]').val(post);
	    e.preventDefault();
	  });
	
	  // Form validation
	  Validation.init();
	
	  $('[am-btn~=submit]').on('click', function(e) {
	    Validation.validate();
	    e.preventDefault();
	  })
	
	
	  // Close modal
	  $('[am-modal~=close]').on('click', function(e) {
	    Modal.hide('commentflag');
	
	    // Clear textarea
	    $('[am-form~=charcount]').val('');
	    e.preventDefault();
	  });
	
	  // Feedback char count
	  Charcount.init(250, '[am-form~=charcount-feedback]', '[am-form~=charcount]');
	
	});


/***/ }),
/* 1 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	  init: function(container, column, breakpoint) {
	
	    // Store scope
	    var scope = this;
	
	    if (typeof breakpoint !== typeof undefined && breakpoint !== false) {
	      var breakpoint = breakpoint;
	    } else {
	      var breakpoint = '768';
	    }
	
	    // Apply product grid heights
	    scope.itemHeight(container, column, breakpoint);
	
	    $(window).on('resize', function() {
	      Throttle.afterEvent('itemHeight', function() {
	        scope.itemHeight(container, column, breakpoint);
	      });
	    });
	  },
	
	  // Apply heights to product grid columns
	  // --------------------------------
	
	  itemHeight: function(container, column, breakpoint) {
	
	    // Store scope
	    var scope = this;
	
	    // Store product height
	    var colHeight = 0;
	
	    // Target breakpoints above mobile
	    if ($(window).width() >= breakpoint) {
	
	      // Loop products and get height
	      $(container).each(function() {
	        var itemHeight = $(this).outerHeight();
	        if (itemHeight > colHeight) {
	          colHeight = itemHeight;
	        }
	      });
	
	    } else {
	
	      // Set height to auto on mobile
	      colHeight = 'auto';
	    }
	
	    // Apply height to all columns
	    $(column).outerHeight(colHeight);
	  }
	};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	  init: function(target, outer) {
	    var outer = $(outer),
	        target = $(target),
	        outerWidth = outer.width(),
	        targetWidth = target.outerWidth(true),
	        targetPosition = target.index(),
	        count = 0,
	        listItem = outer.find('li');
	
	    //Add up the width of all the elements before our target. 
	    for(var i = 0; i < targetPosition; i++){
	      count+= $(listItem[i]).outerWidth(true);
	    }
	
	    outer.scrollLeft(Math.max(0, count - (outerWidth - targetWidth) / 2));
	
	  }
	};

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	  // Initialise module
	  // --------------------------------
	
	  init: function(count, feedback, el) {
	
	    var text_max = count;
	
	    // Add max chars text
	    $(feedback).html(text_max + ' remaining');
	
	    // Listen for keyup on element
	    $(el).keyup(function() {
	      var text = $(el).val(),
	          text_length = text.length,
	          text_remaining = text_max - text_length,
	          newLines = text.match(/(\r\n|\n|\r)/g),
	          addition = 0;
	
	      // Detect line breaks
	      if (newLines != null) {
	        addition = newLines.length;
	      }
	
	      // Update max chars text
	      $(feedback).html((text_remaining - addition) + ' remaining');
	    });
	  }
	};


/***/ })
/******/ ]);
//# sourceMappingURL=community-hub.min.js.map
//# sourceMappingURL=community-hub.min.js.map
