/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Page components
	var Filter = __webpack_require__(1);
	
	// Doc ready
	$(document).ready(function() {
	  UserMessage.init();
	  Validation.init();
	
	  // Filters
	  Filter.sort('[am-filter~=link][data-tags]', '[am-code~=container]', '[am-filter~=list]', '[am-filter~=toggle]');
	  Filter.sort('[am-filter~=sub-link]', '[am-code~=container]');
	  Filter.init('[am-filter~=dropdown] > [am-filter~=link]','[am-filter~=toggle]');
	
	  Ellipsis.watch('[am-code~=product-name]');
	
	  // Carousel
	  $('[am-conversation~=moderators]').owlCarousel({
	    dots: false,
	    margin: 10,
	    mouseDrag: false,
	    nav: true,
	    items: 1,
	    loop: true,
	    navText: ['<div am-carousel="next-moderator"><i data-icon="arrow-left"></i></div>','<div am-carousel="prev-moderator"><i data-icon="arrow-right"></i></div>']
	  });
	
	  $('[am-conversation~=key] > [am-conversation~=sidebar-title]').on('click', function(){
	    $('[am-conversation~=key-item]').toggleClass('active');
	
	    $(this).find('i').attr('data-icon', 'arrow-down');
	
	    if($('[am-conversation~=key-item]').hasClass('active')) {
	      $(this).find('i').attr('data-icon', 'arrow-up');
	    }
	  });
	
	  $('[am-conversation~=featured] > [am-conversation~=sidebar-title]').on('click', function(){
	    $('[am-conversation~=featured-convo]').toggleClass('active');
	
	    $(this).find('i').attr('data-icon', 'arrow-down');
	
	    if($('[am-conversation~=featured-convo]').hasClass('active')) {
	      $(this).find('i').attr('data-icon', 'arrow-up');
	    }
	  });
	
	  // Detect IE11
	  var isIE11 = !!navigator.userAgent.match(/Trident.*rv\:11\./);
	
	  // Truncate selected value
	  if(isIE11) {
	    $('[am-form="select-full-width]').css('background-image', 'url(/assets/img/icons/skip-section-toggle-closed-white-IE11-fb.png)')
	  }
	
	  // Check if form option needs truncating
	  function truncateSelect(formName) {
	
	    $(formName).parent().removeClass('overflow');
	
	    var formWidth = $(formName).parent().width() - 50;
	    var selOpt = $(formName).find("option:selected");
	    var spanWrap = $('<span>').addClass('overflow').text(selOpt.text());
	
	    spanWrap.css({
	        'font-family': selOpt.css('font-family'),
	        'font-style': selOpt.css('font-style'),
	        'font-weight': selOpt.css('font-weight'),
	        'font-size': selOpt.css('font-size')
	    });
	
	    $('body').append(spanWrap);
	    
	    var optionWidth = spanWrap.width();
	
	    if(optionWidth > formWidth) {
	
	      $(formName).parent().addClass('overflow');
	     
	    }
	
	    spanWrap.remove();
	  }
	
	  $('[name="thread-visibility"]').change(function() {
	
	    truncateSelect(this);
	  });
	
	  $('[name="type-of-thread"]').change(function() {
	
	    truncateSelect(this);
	  });
	
	  // Check truncation on window resize
	  $(window).resize(function() {
	
	    truncateSelect('[name="thread-visibility"]');
	    truncateSelect('[name="type-of-thread"]');
	  });
	
	  // Open modal
	  $('[am-modal~=post-thread]').click(function(e) {
	    e.preventDefault();
	
	    // Open modal and start confetti
	    Modal.show('threadModal');
	
	    //initialize truncation on modal open
	    truncateSelect('[name="thread-visibility"]');
	    truncateSelect('[name="type-of-thread"]');
	  });
	
	  // Close modal
	  $('[am-modal~=close]').on('click', function(e) {
	    Modal.hide('threadModal');
	
	    // Clear form values
	    $('[am-flag~=form]').find('input[type=text], textarea').val('');
	
	    e.preventDefault();
	  });
	
	  // Store the select value
	  $('[name~=thread-visibility]').on('change', function() {
	
	    if ($(this).val() === "private-thread") {
	
	      $('[am-form~=private-thread]').slideDown('fast', function () {
	        $('[am-btn~="width-full"]').fadeOut('fast');
	      });
	
	    } else {
	
	      $('[am-form~=private-thread]').slideUp('fast', function () {
	        $('[am-btn~="width-full"]').fadeIn('fast');
	      });
	    }
	  });
	
	  var strokeCount = 0;
	
	  $('[am-form~=private-thread] input').on('keyup',function() {
	    // Count keypresses
	    ++strokeCount;
	
	    if (strokeCount > 2) {
	  
	      $('[am-private~=user-list]').slideDown();
	
	    } else {
	
	      $('[am-private~=user-list]').slideUp();
	    }
	  });
	
	  // Remove user from list and make selected
	  $('[am-private~=user-list] [am-private~=user-item]').on('click', function() {
	    strokeCount = 0;
	    $('[am-form~=private-thread] input').val('');
	    $('[am-private~=user-list]').slideUp();
	    $(this).appendTo('[am-private~=users]');
	  });
	
	  // Remove selected user and add back into list
	  $('[am-private~=users]').delegate('li', 'click', function() {
	    $(this).appendTo('[am-private~=user-list]');
	  });
	});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	
	  // Initialise module
	  // --------------------------------
	
	  init: function(toggleButton, slideToggleButton) {
	
	    // Store scope
	    var scope = this;
	
	    // Slide toggle desktop filter on option click
	    $(toggleButton).on('click', function(e) {
	      scope.slideToggle('[am-filter~=container]', '[am-filter~=list]', '4.1rem');
	      $('[am-filter~=container]').toggleClass('active');
	      e.preventDefault();
	    });
	
	    // Toggle filter on mobile toggle click
	    $(slideToggleButton).on('click', function(e) {
	      scope.toggle('[am-filter~=list]', '[am-filter~=toggle]');
	      e.preventDefault();
	    });
	  },
	
	
	  // Slide toggle filter
	  // --------------------------------
	
	  slideToggle: function(container, el, height) {
	
	    // Store scope
	    var scope = this;
	
	    // Return if breakpoint is mobile
	    if ($(window).width() <= 767) {
	      return;
	    }
	
	    // Calculate height of filter
	    if (scope.status.slide) {
	      var filterHeight = height;
	    } else {
	      var filterHeight = $(el).outerHeight();
	    }
	
	    // Apply height to filter container
	    $(container).outerHeight(filterHeight);
	
	    // Update filter status
	    scope.status.slide = !scope.status.slide;
	  },
	
	
	  // Filter status
	  // --------------------------------
	
	  status: {},
	
	
	  // Toggle mobile filter
	  // --------------------------------
	
	  toggle: function(list, el) {
	
	    // Store scope
	    var scope = this;
	
	    // Toggle filter list
	    $(list).toggleClass('active');
	
	    // Apply active class to mobile filter toggle
	    $(el).toggleClass('active');
	
	    // Update filter status
	    scope.status.toggle = !scope.status.toggle;
	  },
	
	  //Sort filter functionality
	  sort: function(filterButtons, filterItems, filterList, filterToggle) {
	
	    var $items = $(filterItems),
	        $buttons = $(filterButtons),
	        tagged = {};
	
	    $items.each(function () {
	      var item = this;
	      var tags = $(this).data('tags');
	
	      if (tags) {
	        tags.split(/\s*,\s*/).forEach(function (tagName) {
	          if (tagged[tagName] == null) {
	            tagged[tagName] = [];
	          }
	          tagged[tagName].push(item);
	        });
	      }
	    });
	
	    $buttons.click(function(e) {
	      e.preventDefault();
	      var tagName = $(this).data('tags');
	
	      if (tagName === 'all') {
	
	        $('[data-tags]').removeClass('active');
	        $(this).addClass('active');
	        $items.show();
	        // Hide filterList active class
	        $(filterList).removeClass('active');
	        $('[am-filter~=container]').removeClass('active').css('height', '4.1rem');
	
	      } else {
	        // Remove the class active from the all button
	        $('[data-tags~=all]').removeClass('active');
	
	        if ($(this).attr('data-tags')) {
	          $(this).toggleClass('active');
	        }
	
	        // Create current array
	        var current = [];
	
	        $(filterButtons + '.active').each(function() {
	          current.push($(this).attr('data-tags'));
	        });
	
	        $items.hide();
	
	        $.each($items, function () {
	          var theTag = $(this).data('tags');
	
	          if ((/\s*,\s*/).test(theTag)) {
	            var resultArray = theTag.split(',').map( function(theTag) { return String(theTag); });
	
	            for (var i = 0; i < resultArray.length ; i++) {
	              if ( $.inArray( resultArray[i] , current) != -1) {
	                $(this).show();
	              }
	            }
	
	          } else {
	
	            if ($.inArray(theTag, current) != -1) {
	              $(this).show();
	            }
	
	          }
	        });
	      }
	
	      // Hide filtertoggle active class
	      $(filterToggle).removeClass('active');
	
	      // Show all the items if nothing is selected
	      if (! $(filterButtons).hasClass('active')) {
	        $items.show();
	        $('[data-tags~=all]').addClass('active');
	      }
	
	    });
	
	  },
	};

/***/ })
/******/ ]);
//# sourceMappingURL=conversations.min.js.map
//# sourceMappingURL=conversations.min.js.map
