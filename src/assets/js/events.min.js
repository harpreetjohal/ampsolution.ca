/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Page components
	var Filter = __webpack_require__(1);
	
	// Doc ready
	$(document).ready(function() {
	
	  UserMessage.init();
	  Filter.init('[am-filter~=dropdown]','[am-filter~=toggle]');
	
	  var chosenDate = $('[am-event~=calendar-input]').val(),
	      dateSpan = $('[am-event~=calendar-month]'),
	
	      // Get current date
	      currentDate = new Date(),
	
	      // Get month from current date
	      currentMonth = currentDate.getMonth(),
	
	      // Month list
	      monthList = [
	        "January 2017",
	        "February 2017",
	        "March 2017",
	        "April 2017",
	        "May 2017",
	        "June 2017",
	        "July 2017",
	        "August 2017",
	        "September 2017",
	        "October 2017",
	        "November 2017",
	        "December 2017"
	      ],
	
	      // Convert list to array
	      monthArray = $.makeArray(monthList),
	
	      monthList = $('[am-event~=month-list-inner]'),
	      monthItem = '',
	      monthLink = '',
	
	      // Detect IE11
	      isIE11 = !!navigator.userAgent.match(/Trident.*rv\:11\./);
	
	  // Create month navigation
	  $.each(monthArray, function(i) {
	
	    if(i === currentMonth) {
	    monthItem = $('<li/>')
	      .attr('class', 'active')
	      .attr('am-event', 'month-item')
	      .attr('data-count', i)
	      .appendTo(monthList);
	    } else {
	    monthItem = $('<li/>')
	      .attr('am-event', 'month-item')
	      .attr('data-count', i)
	      .appendTo(monthList);      
	    }
	
	    monthLink = $('<a/>')
	      .attr('am-event', 'month-link')
	      .text(monthArray[i])
	      .appendTo(monthItem);
	  });
	
	  // Carousel month navigation
	  $('[am-event~=month-item]').on('click', function() {
	    var monthCount = $(this).data('count'),
	        parentDiv = $('[am-event~=month-list]'),
	        innerListItem = $(this);
	
	    $('[am-event~=month-item]').removeClass('active');
	    $(this).addClass('active');
	
	    // Update carousel position
	    $('[am-carousel~=list-full]').trigger('to.owl.carousel', [monthCount, 150, true]);
	
	    // Update current month heading
	    dateSpan.html(monthArray[monthCount]);
	
	    // Scroll current month to middle
	    parentDiv.scrollTop((monthCount - 3) * innerListItem.height());
	
	  });
	
	  // Close dropdown on click outside of dropdown
	  $('[am-event~="calendar-link"]').click(function() {
	    $(this).addClass('active');
	  });
	
	  $('body').on('click', function (e) {
	    if ($('[am-event~="calendar-link"]').hasClass('active')) { 
	        $('[am-event~="month-list"]').css('display', 'block');
	        $('[am-event~="calendar-link"]').removeClass('active');
	    } else {
	      $('[am-event~="month-list"]').css('display', 'none');
	    }
	  });
	
	  // Loop through each carousel
	  $('[am-event~=all-events] [am-carousel~=list-full] [am-carousel~=item]').each(function() {
	
	    // Count carousel items
	    var itemCount = $(this).find('[am-event~=item]').length;
	
	    // Append load more CTA if more than 4 items
	    if(itemCount >= 4) {
	      $(this).append('<div am-event="more"><a href="{{#}}" am-btn="fill arrow" am-bg="black">Show more</a></div>');
	    };
	  });
	
	  // Display current month heading
	  dateSpan.html(monthArray[currentMonth]);
	
	  // Toggle events calendar navigation
	  $('[am-event~=calendar]').on('click', function() {
	    $('[am-event~=month-list]').slideToggle('fast');
	  });
	
	  // Scroll current month to middle
	  $('[am-event~=calendar]').one('click', function() {
	    $('[am-event~=month-list]').scrollTop((currentMonth - 3) * $('[am-event~=month-item]').height());
	  });
	
	  // Initiate top stories carousel
	  $('[am-event~=your-events] [am-carousel~=list-full]').owlCarousel({
	    center: true,
	    dots: false,
	    loop: false,
	    margin: 0,
	    nav: true,
	    items: 1,
	    rtl: false,
	    rewind: false,
	    lazyLoad: true,
	    onTranslated: setOwlYourHeight,
	    onInitialized: setOwlYourHeight,
	    navText: ['<div am-carousel="next-small"><i data-icon="arrow-left"></i></div>','<div am-carousel="prev-small"><i data-icon="arrow-right"></i></div>']
	  });
	
	  // Initiate top stories carousel
	  if(isIE11) {
	
	    $('[am-event~=all-events] [am-carousel~=list-full]').owlCarousel({
	      center: true,
	      dots: false,
	      loop: false,
	      margin: 0,
	      nav: true,
	      items: 1,
	      rtl: false,
	      rewind: false,
	      autoHeight: true,
	      animateOut: 'fadeOut',
	      smartSpeed: 10,
	      fluidSpeed: 10,
	      navSpeed: 10,
	      lazyLoad: true,
	      onChanged: updateMonth,
	      startPosition: currentMonth,
	      navText: ['<div am-carousel="next-small"><i data-icon="arrow-left"></i></div>','<div am-carousel="prev-small"><i data-icon="arrow-right"></i></div>']
	    });
	
	  } else {
	
	    $('[am-event~=all-events] [am-carousel~=list-full]').owlCarousel({
	      center: true,
	      dots: false,
	      loop: false,
	      margin: 0,
	      nav: true,
	      items: 1,
	      rtl: false,
	      rewind: false,
	      lazyLoad: true,
	      onChanged: updateMonth,
	      startPosition: currentMonth,
	      onTranslated: setOwlAllHeight,
	      onInitialized: setOwlAllHeight,
	      navText: ['<div am-carousel="next-small"><i data-icon="arrow-left"></i></div>','<div am-carousel="prev-small"><i data-icon="arrow-right"></i></div>']
	    });    
	  }
	
	  // Update month title
	  function updateMonth(e) {
	    dateSpan.html(monthArray[e.item.index]);
	
	    $('[am-event~=month-item]').removeClass('active');
	    $('[am-event~=month-item]').eq(e.item.index).addClass('active');
	  }
	
	  //Fix for autoHeight iPad bug
	  function setOwlAllHeight(event) {
	    var maxHeight = 0;
	
	    $('[am-event~=all-events] [am-carousel~=list-full] .owl-item.active').each(function () {
	        var thisHeight = parseInt( $(this).height() );
	        maxHeight = (maxHeight >= thisHeight ? maxHeight : thisHeight);
	    });
	
	    $('[am-event~=all-events] [am-carousel~=list-full].owl-carousel').css('height', maxHeight );
	    $('[am-event~=all-events] [am-carousel~=list-full] .owl-stage-outer').css('height', maxHeight );
	  }  
	
	  function setOwlYourHeight(event) {
	    var maxHeight = 0;
	
	    $('[am-event~=all-events] [am-carousel~=list-full] .owl-item.active').each(function () {
	        var thisHeight = parseInt( $(this).height() );
	        maxHeight = (maxHeight >= thisHeight ? maxHeight : thisHeight);
	    });
	
	    $('[am-event~=all-events] [am-carousel~=list-full].owl-carousel').css('height', maxHeight );
	    $('[am-event~=all-events] [am-carousel~=list-full] .owl-stage-outer').css('height', maxHeight );
	  }  
	});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	
	  // Initialise module
	  // --------------------------------
	
	  init: function(toggleButton, slideToggleButton) {
	
	    // Store scope
	    var scope = this;
	
	    // Slide toggle desktop filter on option click
	    $(toggleButton).on('click', function(e) {
	      scope.slideToggle('[am-filter~=container]', '[am-filter~=list]', '4.1rem');
	      $('[am-filter~=container]').toggleClass('active');
	      e.preventDefault();
	    });
	
	    // Toggle filter on mobile toggle click
	    $(slideToggleButton).on('click', function(e) {
	      scope.toggle('[am-filter~=list]', '[am-filter~=toggle]');
	      e.preventDefault();
	    });
	  },
	
	
	  // Slide toggle filter
	  // --------------------------------
	
	  slideToggle: function(container, el, height) {
	
	    // Store scope
	    var scope = this;
	
	    // Return if breakpoint is mobile
	    if ($(window).width() <= 767) {
	      return;
	    }
	
	    // Calculate height of filter
	    if (scope.status.slide) {
	      var filterHeight = height;
	    } else {
	      var filterHeight = $(el).outerHeight();
	    }
	
	    // Apply height to filter container
	    $(container).outerHeight(filterHeight);
	
	    // Update filter status
	    scope.status.slide = !scope.status.slide;
	  },
	
	
	  // Filter status
	  // --------------------------------
	
	  status: {},
	
	
	  // Toggle mobile filter
	  // --------------------------------
	
	  toggle: function(list, el) {
	
	    // Store scope
	    var scope = this;
	
	    // Toggle filter list
	    $(list).toggleClass('active');
	
	    // Apply active class to mobile filter toggle
	    $(el).toggleClass('active');
	
	    // Update filter status
	    scope.status.toggle = !scope.status.toggle;
	  },
	
	  //Sort filter functionality
	  sort: function(filterButtons, filterItems, filterList, filterToggle) {
	
	    var $items = $(filterItems),
	        $buttons = $(filterButtons),
	        tagged = {};
	
	    $items.each(function () {
	      var item = this;
	      var tags = $(this).data('tags');
	
	      if (tags) {
	        tags.split(/\s*,\s*/).forEach(function (tagName) {
	          if (tagged[tagName] == null) {
	            tagged[tagName] = [];
	          }
	          tagged[tagName].push(item);
	        });
	      }
	    });
	
	    $buttons.click(function(e) {
	      e.preventDefault();
	      var tagName = $(this).data('tags');
	
	      if (tagName === 'all') {
	
	        $('[data-tags]').removeClass('active');
	        $(this).addClass('active');
	        $items.show();
	        // Hide filterList active class
	        $(filterList).removeClass('active');
	        $('[am-filter~=container]').removeClass('active').css('height', '4.1rem');
	
	      } else {
	        // Remove the class active from the all button
	        $('[data-tags~=all]').removeClass('active');
	
	        if ($(this).attr('data-tags')) {
	          $(this).toggleClass('active');
	        }
	
	        // Create current array
	        var current = [];
	
	        $(filterButtons + '.active').each(function() {
	          current.push($(this).attr('data-tags'));
	        });
	
	        $items.hide();
	
	        $.each($items, function () {
	          var theTag = $(this).data('tags');
	
	          if ((/\s*,\s*/).test(theTag)) {
	            var resultArray = theTag.split(',').map( function(theTag) { return String(theTag); });
	
	            for (var i = 0; i < resultArray.length ; i++) {
	              if ( $.inArray( resultArray[i] , current) != -1) {
	                $(this).show();
	              }
	            }
	
	          } else {
	
	            if ($.inArray(theTag, current) != -1) {
	              $(this).show();
	            }
	
	          }
	        });
	      }
	
	      // Hide filtertoggle active class
	      $(filterToggle).removeClass('active');
	
	      // Show all the items if nothing is selected
	      if (! $(filterButtons).hasClass('active')) {
	        $items.show();
	        $('[data-tags~=all]').addClass('active');
	      }
	
	    });
	
	  },
	};

/***/ })
/******/ ]);
//# sourceMappingURL=events.min.js.map
//# sourceMappingURL=events.min.js.map
