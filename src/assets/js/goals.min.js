/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Page components
	var Filter = __webpack_require__(1),
	    Height = __webpack_require__(2);
	
	// Doc ready
	$(document).ready(function() {
	
	  $('[am-goals-steps~=wrapper]').owlCarousel({
	    dots: false,
	    margin: 10,
	    lazyLoad: true,
	    lazyContent: true,
	    mouseDrag: false,
	    nav: true,
	    navText: ['<div am-carousel="next-small"><i data-icon="arrow-left"></i></div>','<div am-carousel="prev-small"><i data-icon="arrow-right"></i></div>'],
	    responsive: {
	      0: {
	        items: 1
	      },
	      768: {
	        items: 2
	      },
	      992: {
	        items: 3
	      }
	    }
	  });
	
	
	  $('[am-carousel~=completed-goals]').owlCarousel({
	    dots: false,
	    margin: 10,
	    lazyLoad: true,
	    lazyContent: true,
	    mouseDrag: false,
	    nav: true,
	    navText: ['<div am-carousel="next-small"><i data-icon="arrow-left"></i></div>','<div am-carousel="prev-small"><i data-icon="arrow-right"></i></div>'],
	    responsive: {
	      420: {
	        items: 1
	      },
	      768: {
	        items: 2
	      },
	      992: {
	        items: 3
	      }
	    }
	  });
	
	  // Set Heights
	  Height.init('[am-goals-steps~=item]', '[am-goals-steps~=item-wrapper]');
	
	  // Filters
	  Filter.sort('[am-goals~=filter-links] > li', '[am-goals~=questions]', '[am-goals~=filter-links]', '[am-filter~=toggle]');
	
	  //
	  $('[am-filter~=toggle]').on('click', function(e) {
	      e.preventDefault();
	      $(this).addClass('active');
	      $('[am-goals~=filter-links]').toggle();
	  });
	
	  // this might do adding to the filter sort property
	  $('[am-goals~=filter-links] > li').click( function(){
	
	    $('[am-goals~=filter-links] > li.active').removeClass('active')
	    $(this).addClass('active');
	  });
	
	  // Badge selection
	  $('[am-goals~=questions]').click(function(e) {
	    var tag = $(this).attr('data-tag'),
	        goals= $(this).attr('data-question'),
	        title = $(this).attr('data-title'),
	        content = $(this).attr('data-content'),
	        image = $(this).attr('data-image'),
	        badgeColour = $(this).attr('data-colour'),
	        questionClicked = $(this);
	
	    // Open modal and start confetti
	    Modal.show('questionsModal');
	
	    // Retreive badge attributes
	    $('[am-badge~=tag]').html(tag);
	    $('[am-badge~=header]').attr('am-bg', badgeColour);
	    $('[am-badge~=goal-title]').html(title);
	    $('[am-badge~=image]').attr('src', image);
	    $('[am-badge~=content]').html(content);
	
	    e.preventDefault();
	    
	    $('[am-modal~=pin-question]').on('click', function(e) {
	      $('[am-goals~=questions]').not(questionClicked).find('[am-goals-library~="question"]').removeClass('active');
	      questionClicked.attr('data-tags', 'in-progress');
	      questionClicked.data('tags', 'in-progress');
	      questionClicked.find('[am-goals-library~="question"]').addClass('active');
	      Modal.hide('questionsModal');
	      e.preventDefault();
	    })
	  });
	
	  // Close modal
	  $('[am-modal~=close]').on('click', function(e) {
	    Modal.hide('questionsModal');
	    e.preventDefault();
	  });
	
	});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	
	  // Initialise module
	  // --------------------------------
	
	  init: function(toggleButton, slideToggleButton) {
	
	    // Store scope
	    var scope = this;
	
	    // Slide toggle desktop filter on option click
	    $(toggleButton).on('click', function(e) {
	      scope.slideToggle('[am-filter~=container]', '[am-filter~=list]', '4.1rem');
	      $('[am-filter~=container]').toggleClass('active');
	      e.preventDefault();
	    });
	
	    // Toggle filter on mobile toggle click
	    $(slideToggleButton).on('click', function(e) {
	      scope.toggle('[am-filter~=list]', '[am-filter~=toggle]');
	      e.preventDefault();
	    });
	  },
	
	
	  // Slide toggle filter
	  // --------------------------------
	
	  slideToggle: function(container, el, height) {
	
	    // Store scope
	    var scope = this;
	
	    // Return if breakpoint is mobile
	    if ($(window).width() <= 767) {
	      return;
	    }
	
	    // Calculate height of filter
	    if (scope.status.slide) {
	      var filterHeight = height;
	    } else {
	      var filterHeight = $(el).outerHeight();
	    }
	
	    // Apply height to filter container
	    $(container).outerHeight(filterHeight);
	
	    // Update filter status
	    scope.status.slide = !scope.status.slide;
	  },
	
	
	  // Filter status
	  // --------------------------------
	
	  status: {},
	
	
	  // Toggle mobile filter
	  // --------------------------------
	
	  toggle: function(list, el) {
	
	    // Store scope
	    var scope = this;
	
	    // Toggle filter list
	    $(list).toggleClass('active');
	
	    // Apply active class to mobile filter toggle
	    $(el).toggleClass('active');
	
	    // Update filter status
	    scope.status.toggle = !scope.status.toggle;
	  },
	
	  //Sort filter functionality
	  sort: function(filterButtons, filterItems, filterList, filterToggle) {
	
	    var $items = $(filterItems),
	        $buttons = $(filterButtons),
	        tagged = {};
	
	    $items.each(function () {
	      var item = this;
	      var tags = $(this).data('tags');
	
	      if (tags) {
	        tags.split(/\s*,\s*/).forEach(function (tagName) {
	          if (tagged[tagName] == null) {
	            tagged[tagName] = [];
	          }
	          tagged[tagName].push(item);
	        });
	      }
	    });
	
	    $buttons.click(function(e) {
	      e.preventDefault();
	      var tagName = $(this).data('tags');
	
	      if (tagName === 'all') {
	
	        $('[data-tags]').removeClass('active');
	        $(this).addClass('active');
	        $items.show();
	        // Hide filterList active class
	        $(filterList).removeClass('active');
	        $('[am-filter~=container]').removeClass('active').css('height', '4.1rem');
	
	      } else {
	        // Remove the class active from the all button
	        $('[data-tags~=all]').removeClass('active');
	
	        if ($(this).attr('data-tags')) {
	          $(this).toggleClass('active');
	        }
	
	        // Create current array
	        var current = [];
	
	        $(filterButtons + '.active').each(function() {
	          current.push($(this).attr('data-tags'));
	        });
	
	        $items.hide();
	
	        $.each($items, function () {
	          var theTag = $(this).data('tags');
	
	          if ((/\s*,\s*/).test(theTag)) {
	            var resultArray = theTag.split(',').map( function(theTag) { return String(theTag); });
	
	            for (var i = 0; i < resultArray.length ; i++) {
	              if ( $.inArray( resultArray[i] , current) != -1) {
	                $(this).show();
	              }
	            }
	
	          } else {
	
	            if ($.inArray(theTag, current) != -1) {
	              $(this).show();
	            }
	
	          }
	        });
	      }
	
	      // Hide filtertoggle active class
	      $(filterToggle).removeClass('active');
	
	      // Show all the items if nothing is selected
	      if (! $(filterButtons).hasClass('active')) {
	        $items.show();
	        $('[data-tags~=all]').addClass('active');
	      }
	
	    });
	
	  },
	};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	  init: function(container, column, breakpoint) {
	
	    // Store scope
	    var scope = this;
	
	    if (typeof breakpoint !== typeof undefined && breakpoint !== false) {
	      var breakpoint = breakpoint;
	    } else {
	      var breakpoint = '768';
	    }
	
	    // Apply product grid heights
	    scope.itemHeight(container, column, breakpoint);
	
	    $(window).on('resize', function() {
	      Throttle.afterEvent('itemHeight', function() {
	        scope.itemHeight(container, column, breakpoint);
	      });
	    });
	  },
	
	  // Apply heights to product grid columns
	  // --------------------------------
	
	  itemHeight: function(container, column, breakpoint) {
	
	    // Store scope
	    var scope = this;
	
	    // Store product height
	    var colHeight = 0;
	
	    // Target breakpoints above mobile
	    if ($(window).width() >= breakpoint) {
	
	      // Loop products and get height
	      $(container).each(function() {
	        var itemHeight = $(this).outerHeight();
	        if (itemHeight > colHeight) {
	          colHeight = itemHeight;
	        }
	      });
	
	    } else {
	
	      // Set height to auto on mobile
	      colHeight = 'auto';
	    }
	
	    // Apply height to all columns
	    $(column).outerHeight(colHeight);
	  }
	};

/***/ })
/******/ ]);
//# sourceMappingURL=goals.min.js.map
//# sourceMappingURL=goals.min.js.map
