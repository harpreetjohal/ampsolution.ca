/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Page components
	var SocialSharing = __webpack_require__(1),
	    Height = __webpack_require__(2),
	    Charcount = __webpack_require__(3),
	    Center = __webpack_require__(4);
	
	// Doc ready
	$(document).ready(function() {
	  UserMessage.init();
	
	  // Make hero blocks equal height
	  Height.init('[am-community~=equal-height]', '[am-community~=equal-height]');
	
	  // Center nav on active item
	  Center.init('[am-sub-nav~=item].active', '[am-sub-nav~=inner]');
	
	  // Social Sharing
	  SocialSharing.init('[am-profile~=tile-sharing]', '[am-social~=sharing-icons]');
	
	  // Initiate swiper carousel
	  $('.owl-carousel').owlCarousel({
	    dots: false,
	    loop: false,
	    margin: 0,
	    nav: true,
	    rtl: true,
	    rewind: false,
	    items: 1,
	    onChanged: updateHeight,
	    onInitialized: updateHeight,
	    navText: ['<div am-carousel="next"><i data-icon="arrow-left"></i></div>','<div am-carousel="prev"><i data-icon="arrow-right"></i></div>']
	  });
	
	  // Update heights
	  function updateHeight(e) {
	    Height.itemHeight('[am-profile~=tile-badge]', '[am-hero~=tile]', '992');
	  }
	
	  // Form validation
	  Validation.init();
	
	  $('[am-btn~=submit]').on('click', function(e) {
	    Validation.validate();
	    e.preventDefault();
	  })
	
	  // Submit hero modal
	  $('[am-hero~=submit]').on('click', function(e) {
	    // Open modal
	    Modal.show('submitHero');
	    e.preventDefault();
	  });
	
	
	  // Close modal
	  $('[am-modal~=close]').on('click', function(e) {
	    Modal.hide('submitHero');
	
	    // Clear textarea
	    $('[am-form~=charcount]').val('');
	    e.preventDefault();
	  });
	
	  // Feedback char count
	  Charcount.init(500, '[am-form~=charcount-feedback]', '[am-form~=charcount]');
	
	});


/***/ }),
/* 1 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	
	  // Execution
	  // --------------------------------
	  init: function (el, elShow) {
	    $(el).on('click', function (e) {
	      $(this).toggleClass('active');
	      $(this).next(elShow).toggleClass('active');
	
	      e.preventDefault();
	    });
	  }
	};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	  init: function(container, column, breakpoint) {
	
	    // Store scope
	    var scope = this;
	
	    if (typeof breakpoint !== typeof undefined && breakpoint !== false) {
	      var breakpoint = breakpoint;
	    } else {
	      var breakpoint = '768';
	    }
	
	    // Apply product grid heights
	    scope.itemHeight(container, column, breakpoint);
	
	    $(window).on('resize', function() {
	      Throttle.afterEvent('itemHeight', function() {
	        scope.itemHeight(container, column, breakpoint);
	      });
	    });
	  },
	
	  // Apply heights to product grid columns
	  // --------------------------------
	
	  itemHeight: function(container, column, breakpoint) {
	
	    // Store scope
	    var scope = this;
	
	    // Store product height
	    var colHeight = 0;
	
	    // Target breakpoints above mobile
	    if ($(window).width() >= breakpoint) {
	
	      // Loop products and get height
	      $(container).each(function() {
	        var itemHeight = $(this).outerHeight();
	        if (itemHeight > colHeight) {
	          colHeight = itemHeight;
	        }
	      });
	
	    } else {
	
	      // Set height to auto on mobile
	      colHeight = 'auto';
	    }
	
	    // Apply height to all columns
	    $(column).outerHeight(colHeight);
	  }
	};

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	  // Initialise module
	  // --------------------------------
	
	  init: function(count, feedback, el) {
	
	    var text_max = count;
	
	    // Add max chars text
	    $(feedback).html(text_max + ' remaining');
	
	    // Listen for keyup on element
	    $(el).keyup(function() {
	      var text = $(el).val(),
	          text_length = text.length,
	          text_remaining = text_max - text_length,
	          newLines = text.match(/(\r\n|\n|\r)/g),
	          addition = 0;
	
	      // Detect line breaks
	      if (newLines != null) {
	        addition = newLines.length;
	      }
	
	      // Update max chars text
	      $(feedback).html((text_remaining - addition) + ' remaining');
	    });
	  }
	};


/***/ }),
/* 4 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	  init: function(target, outer) {
	    var outer = $(outer),
	        target = $(target),
	        outerWidth = outer.width(),
	        targetWidth = target.outerWidth(true),
	        targetPosition = target.index(),
	        count = 0,
	        listItem = outer.find('li');
	
	    //Add up the width of all the elements before our target. 
	    for(var i = 0; i < targetPosition; i++){
	      count+= $(listItem[i]).outerWidth(true);
	    }
	
	    outer.scrollLeft(Math.max(0, count - (outerWidth - targetWidth) / 2));
	
	  }
	};

/***/ })
/******/ ]);
//# sourceMappingURL=heroes.min.js.map
//# sourceMappingURL=heroes.min.js.map
