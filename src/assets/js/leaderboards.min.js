/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Page components
	var Filter = __webpack_require__(1),
	    Height = __webpack_require__(2),
	    ProfileCard = __webpack_require__(3),
	    AuthorCard = __webpack_require__(4);
	
	// Doc ready
	$(document).ready(function() {
	  UserMessage.init();
	  ProfileCard.init('[am-profile~=card-link]');
	  AuthorCard.init('[am-profile~=author-link]');
	
	  // Filters
	  Filter.sort('[am-filter~=link][data-tags]', '[am-code~=container]', '[am-filter~=list]', '[am-filter~=toggle]');
	  Filter.sort('[am-filter~=sub-link]', '[am-code~=container]');
	  Filter.init('[am-filter~=dropdown] > [am-filter~=link]','[am-filter~=toggle]');
	
	  // Make hero blocks equal height
	  Height.init('[am-leaderboards~=equal-height]', '[am-leaderboards~=equal-height]', 992);
	
	  // Scrolling
	  $('[am-table~=position-anchor]').click( function(e){
	    e.preventDefault();
	    $('html, body').animate({
	      scrollTop: $( '[am-table~=position]' ).offset().top
	    }, 400);
	    return false;
	  });
	
	  $('[am-filter~=sub-link-company]').first().click( function() {
	    $('[am-filter~=sub-link-company]').last().removeClass('active');
	    $(this).addClass('active');
	  });
	
	  $('[am-filter~=sub-link-company]').last().click( function() {
	    $('[am-filter~=sub-link-company]').first().removeClass('active');
	    $(this).addClass('active');
	  });
	
	  $('[am-filter~=sub-link-points]').first().click( function() {
	    $('[am-filter~=sub-link-points]').last().removeClass('active');
	    $(this).addClass('active');
	  });
	
	  $('[am-filter~=sub-link-points]').last().click( function() {
	    $('[am-filter~=sub-link-points]').first().removeClass('active');
	    $(this).addClass('active');
	  });
	
	  $('[am-filter~=link-connections]').click( function() {
	    $('[am-filter~=link-my-squads]').removeClass('active');
	    $(this).addClass('active');
	  });
	
	  $('[am-filter~=link-my-squads]').click( function() {
	    $('[am-filter~=link-connections]').removeClass('active');
	    $(this).addClass('active');
	  });
	
	});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	
	  // Initialise module
	  // --------------------------------
	
	  init: function(toggleButton, slideToggleButton) {
	
	    // Store scope
	    var scope = this;
	
	    // Slide toggle desktop filter on option click
	    $(toggleButton).on('click', function(e) {
	      scope.slideToggle('[am-filter~=container]', '[am-filter~=list]', '4.1rem');
	      $('[am-filter~=container]').toggleClass('active');
	      e.preventDefault();
	    });
	
	    // Toggle filter on mobile toggle click
	    $(slideToggleButton).on('click', function(e) {
	      scope.toggle('[am-filter~=list]', '[am-filter~=toggle]');
	      e.preventDefault();
	    });
	  },
	
	
	  // Slide toggle filter
	  // --------------------------------
	
	  slideToggle: function(container, el, height) {
	
	    // Store scope
	    var scope = this;
	
	    // Return if breakpoint is mobile
	    if ($(window).width() <= 767) {
	      return;
	    }
	
	    // Calculate height of filter
	    if (scope.status.slide) {
	      var filterHeight = height;
	    } else {
	      var filterHeight = $(el).outerHeight();
	    }
	
	    // Apply height to filter container
	    $(container).outerHeight(filterHeight);
	
	    // Update filter status
	    scope.status.slide = !scope.status.slide;
	  },
	
	
	  // Filter status
	  // --------------------------------
	
	  status: {},
	
	
	  // Toggle mobile filter
	  // --------------------------------
	
	  toggle: function(list, el) {
	
	    // Store scope
	    var scope = this;
	
	    // Toggle filter list
	    $(list).toggleClass('active');
	
	    // Apply active class to mobile filter toggle
	    $(el).toggleClass('active');
	
	    // Update filter status
	    scope.status.toggle = !scope.status.toggle;
	  },
	
	  //Sort filter functionality
	  sort: function(filterButtons, filterItems, filterList, filterToggle) {
	
	    var $items = $(filterItems),
	        $buttons = $(filterButtons),
	        tagged = {};
	
	    $items.each(function () {
	      var item = this;
	      var tags = $(this).data('tags');
	
	      if (tags) {
	        tags.split(/\s*,\s*/).forEach(function (tagName) {
	          if (tagged[tagName] == null) {
	            tagged[tagName] = [];
	          }
	          tagged[tagName].push(item);
	        });
	      }
	    });
	
	    $buttons.click(function(e) {
	      e.preventDefault();
	      var tagName = $(this).data('tags');
	
	      if (tagName === 'all') {
	
	        $('[data-tags]').removeClass('active');
	        $(this).addClass('active');
	        $items.show();
	        // Hide filterList active class
	        $(filterList).removeClass('active');
	        $('[am-filter~=container]').removeClass('active').css('height', '4.1rem');
	
	      } else {
	        // Remove the class active from the all button
	        $('[data-tags~=all]').removeClass('active');
	
	        if ($(this).attr('data-tags')) {
	          $(this).toggleClass('active');
	        }
	
	        // Create current array
	        var current = [];
	
	        $(filterButtons + '.active').each(function() {
	          current.push($(this).attr('data-tags'));
	        });
	
	        $items.hide();
	
	        $.each($items, function () {
	          var theTag = $(this).data('tags');
	
	          if ((/\s*,\s*/).test(theTag)) {
	            var resultArray = theTag.split(',').map( function(theTag) { return String(theTag); });
	
	            for (var i = 0; i < resultArray.length ; i++) {
	              if ( $.inArray( resultArray[i] , current) != -1) {
	                $(this).show();
	              }
	            }
	
	          } else {
	
	            if ($.inArray(theTag, current) != -1) {
	              $(this).show();
	            }
	
	          }
	        });
	      }
	
	      // Hide filtertoggle active class
	      $(filterToggle).removeClass('active');
	
	      // Show all the items if nothing is selected
	      if (! $(filterButtons).hasClass('active')) {
	        $items.show();
	        $('[data-tags~=all]').addClass('active');
	      }
	
	    });
	
	  },
	};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	  init: function(container, column, breakpoint) {
	
	    // Store scope
	    var scope = this;
	
	    if (typeof breakpoint !== typeof undefined && breakpoint !== false) {
	      var breakpoint = breakpoint;
	    } else {
	      var breakpoint = '768';
	    }
	
	    // Apply product grid heights
	    scope.itemHeight(container, column, breakpoint);
	
	    $(window).on('resize', function() {
	      Throttle.afterEvent('itemHeight', function() {
	        scope.itemHeight(container, column, breakpoint);
	      });
	    });
	  },
	
	  // Apply heights to product grid columns
	  // --------------------------------
	
	  itemHeight: function(container, column, breakpoint) {
	
	    // Store scope
	    var scope = this;
	
	    // Store product height
	    var colHeight = 0;
	
	    // Target breakpoints above mobile
	    if ($(window).width() >= breakpoint) {
	
	      // Loop products and get height
	      $(container).each(function() {
	        var itemHeight = $(this).outerHeight();
	        if (itemHeight > colHeight) {
	          colHeight = itemHeight;
	        }
	      });
	
	    } else {
	
	      // Set height to auto on mobile
	      colHeight = 'auto';
	    }
	
	    // Apply height to all columns
	    $(column).outerHeight(colHeight);
	  }
	};

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	
	
	  // Profile-card modal
	  // --------------------------------
	  init: function(el) {
	
	    // Profile Avatar
	    $(el).click(function(e) {
	      var userName = $(this).attr('data-name'),
	          userLocation = $(this).attr('data-location'),
	          userImage = $(this).attr('data-avatar'),
	          userLevel = $(this).attr('data-level');
	
	      // Open modal
	      Modal.show('profileCard');
	
	      // Retrieve avatar attributes
	      $('[am-profile~=name]').html(userName);
	      $('[am-profile~=location]').html(userLocation);
	      $('[am-profile~=avatar-image]').attr('src', userImage);
	      $('[am-profile-card~=banner]').attr('am-border', userLevel);
	      $('[am-profile~=avatar-image]').attr('am-border', userLevel);
	
	      e.preventDefault();
	    });
	
	    $('[am-modal~=profile-card]').click(function(e){
	      e.preventDefault();
	      Modal.hide('profileCard');
	    });
	
	    $('[am-modal~=wrap]').mousedown(function(e) {
	      var clicked = $(e.target);
	      if (clicked.is('[am-profile-card~=container]') || clicked.parents().is('[am-profile-card~=container]')) {
	        return;
	      } else {
	          Modal.hide('profileCard');
	      }
	    });
	
	    // Toggle follow
	    $('[am-modal~=profile-card-container] [am-btn~=follow]').on('click', function() {
	      $(this).html() == 'Unfollow' ? $(this).html('Follow') : $(this).html('Unfollow');
	
	      $(this).attr('am-btn', function(index, attr){
	        return attr == 'cross fill follow' ? 'tick fill follow' : 'cross fill follow';
	      });
	    });
	
	  }
	};

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	
	
	  // Author-card modal
	  // --------------------------------
	  init: function(el) {
	
	    // Author Avatar
	    $(el).click(function(e) {
	      var userName = $(this).attr('data-name'),
	          userLocation = $(this).attr('data-location'),
	          userImage = $(this).attr('data-avatar'),
	          userBanner = $(this).attr('data-banner'),
	          userLevel = $(this).attr('data-level'),
	          userFollowing = $(this).attr('data-following'),
	          userFollowers = $(this).attr('data-followers'),
	          userDetails = $(this).attr('data-details'),
	          userXbox = $(this).attr('data-xbox'),
	          userTwitter = $(this).attr('data-twitter'),
	          userFacebook = $(this).attr('data-facebook');
	
	      // Open modal
	      Modal.show('authorCard');
	
	      // Retrieve avatar attributes
	      $('[am-profile~=name]').html(userName);
	      $('[am-profile~=location]').html(userLocation);
	      $('[am-profile~=avatar-image]').attr('src', userImage);
	      $('[am-profile~=banner-image]').attr('src', userBanner);
	      $('[am-profile-card~=banner]').attr('am-border', userLevel);
	      $('[am-profile~=avatar-image]').attr('am-border', userLevel);
	      $('[am-profile~=following]').html(userFollowing);
	      $('[am-profile~=followers]').html(userFollowers);
	      $('[am-profile~=details]').html(userDetails);
	      $('[am-profile~=xbox]').html(userXbox);
	      $('[am-profile~=twitter]').html(userTwitter);
	      $('[am-profile~=facebook]').html(userFacebook);
	
	      e.preventDefault();
	    });
	
	    $('[am-modal~=profile-card]').click(function(e){
	      e.preventDefault();
	      Modal.hide('authorCard');
	    });
	
	    $('[am-modal~=wrap]').mousedown(function(e) {
	      var clicked = $(e.target);
	      if (clicked.is('[am-profile-card~=container]') || clicked.parents().is('[am-profile-card~=container]')) {
	        return;
	      } else {
	          Modal.hide('authorCard');
	      }
	    });
	
	    // Toggle follow
	    $('[am-modal~=author-card-container] [am-btn~=follow]').on('click', function() {
	      $(this).html() == 'Unfollow' ? $(this).html('Follow') : $(this).html('Unfollow');
	
	      $(this).attr('am-btn', function(index, attr){
	        return attr == 'cross fill follow' ? 'tick fill follow' : 'cross fill follow';
	      });
	    });
	
	  }
	};

/***/ })
/******/ ]);
//# sourceMappingURL=leaderboards.min.js.map
//# sourceMappingURL=leaderboards.min.js.map
